class Wrong(NameError):
	def __init__(self,j):
		self.j=10
a=input("Enter the input integer")
try:
		if a>5:
			raise Wrong("user defined")
except Wrong as i:
		print(i.j)try:
		if a>5:
			raise Exception("pre defined")
except Exception:
	print("Except block")
		print("Wrong")
else:
    a=a+10
    print("else block")
finally:
    print("final sure block")
    
    


try:
	if a>5:
		raise Exception("pre defined")
except Exception:
	print("Except block")
	
try:
	if a>5:
		raise SyntaxError("pre defined")  	#we can write any error class name
except SyntaxError:
	print("Except block")




def boxPrint(symbol, width, height):
	if len(symbol) != 1:
		raise Exception('Symbol must be a single character string.')
	if width <= 2:
		raise Exception('Width must be greater than 2.')
	if height <= 2:
		raise Exception('Height must be greater than 2.')

	print(symbol * width)
for sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3),('d',7,7),('e',4,1)):
	try:
		boxPrint(sym, w, h)
	except Exception as err:
		print('An exception happened: ' + str(err))
		
		


#Assertions

market_2nd = {'ns': 'green', 'ew': 'red'}
mission_16th = {'ns': 'red', 'ew': 'green'}
def switchLights(stoplight):
    assert 'red' in stoplight.values(), 'Neither light is red! ' + str(stoplight)
    for key in stoplight.keys():
        if stoplight[key] == 'green':
            stoplight[key] = 'yellow'
        elif stoplight[key] == 'yellow':
            stoplight[key] = 'red'
        elif stoplight[key] == 'red':
            stoplight[key] = 'green'
    
switchLights(market_2nd)


#Logging
import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')  
#To enable the logging module to display log messages on screen
#basicConfig() function lets specify what details about the LogRecord object you want to see and how you want those details displayed.
logging.debug('Start of program')

def factorial(n):
    logging.debug('Start of factorial(%s)' % (n))
    total = 1
    for i in range(n + 1):
        total *= i
        logging.debug('i is ' + str(i) + ', total is ' + str(total))
    logging.debug('End of factorial(%s)' % (n))
    return total

print(factorial(5))
logging.debug('End of program')


